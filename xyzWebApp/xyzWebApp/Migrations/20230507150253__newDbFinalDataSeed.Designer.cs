// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using xyzWebApp.Data;

#nullable disable

namespace xyzWebApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230507150253__newDbFinalDataSeed")]
    partial class _newDbFinalDataSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7a830b98-d453-441b-bf95-f97c7b79c81c",
                            ConcurrencyStamp = "91a126ea-8e75-4804-a21c-60405c49cfbe",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "168d01bf-f3eb-49c5-8f52-35a05304c020",
                            ConcurrencyStamp = "f1907d22-c43d-4e41-a191-13ced8e50306",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "7023ed45-9bf9-4fb8-a7e8-30378c89d14d",
                            RoleId = "7a830b98-d453-441b-bf95-f97c7b79c81c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("xyzWebApp.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7023ed45-9bf9-4fb8-a7e8-30378c89d14d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6e3b36a8-9ca1-40e5-89fc-cac37f8652e7",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            FirstName = "Master",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOQPvIImwWznZtjUFzqOjqnZdarElw7bjix0OiCREYJV0l/ZshuNeWidT9o4sb1Qnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bfe3457f-8f67-48ad-80ef-2b143bf4c04a",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("xyzWebApp.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Massage's we offer.",
                            Title = "Massage's"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Essential and aromatic oil's.",
                            Title = "Oil's"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Bio all natural hand made soap's.",
                            Title = "Soap's"
                        },
                        new
                        {
                            Id = 4,
                            Description = "All natural and skin healthy body cream's.",
                            Title = "Body cream's"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Bio friendly and skin healthy shampoo's",
                            Title = "Shampoo's"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Natural ingeredient toothpaste's made by hand.",
                            Title = "Toothpaste's"
                        });
                });

            modelBuilder.Entity("xyzWebApp.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("InStock")
                        .HasColumnType("decimal(9,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "mas_oil.jpg",
                            InStock = 54m,
                            Price = 39.99m,
                            Sku = "MU0023",
                            Title = "Massage oil"
                        },
                        new
                        {
                            Id = 2,
                            Image = "lime_oil.jpg",
                            InStock = 46m,
                            Price = 47.99m,
                            Sku = "EU0202",
                            Title = "Lime essential oil"
                        },
                        new
                        {
                            Id = 3,
                            Image = "bio_soap.jpg",
                            InStock = 191m,
                            Price = 14.99m,
                            Sku = "MO1002",
                            Title = "Bio soap"
                        },
                        new
                        {
                            Id = 4,
                            Image = "lav_soap.jpg",
                            InStock = 201m,
                            Price = 4.99m,
                            Sku = "SP2220",
                            Title = "Natural lavander soap"
                        },
                        new
                        {
                            Id = 5,
                            Image = "white_soap.jpg",
                            InStock = 98m,
                            Price = 29.99m,
                            Sku = "FC0099",
                            Title = "White soap"
                        },
                        new
                        {
                            Id = 6,
                            Image = "body_balm.jpg",
                            InStock = 81m,
                            Price = 24.99m,
                            Sku = "SH0001",
                            Title = "Body balm"
                        },
                        new
                        {
                            Id = 7,
                            Image = "body_cream.jpg",
                            InStock = 39m,
                            Price = 3.49m,
                            Sku = "MS7770",
                            Title = "Body cream"
                        },
                        new
                        {
                            Id = 8,
                            Image = "bio_tooth.jpg",
                            InStock = 40m,
                            Price = 11.99m,
                            Sku = "TT5770",
                            Title = "Bio toothpaste"
                        },
                        new
                        {
                            Id = 9,
                            Image = "bergam_oil.jpg",
                            InStock = 60m,
                            Price = 24.99m,
                            Sku = "OO0100",
                            Title = "Bergamont essential oil"
                        },
                        new
                        {
                            Id = 10,
                            Image = "natural_tooth.jpg",
                            InStock = 49m,
                            Price = 9.99m,
                            Sku = "TT1111",
                            Title = "All natural toothpast"
                        },
                        new
                        {
                            Id = 11,
                            Image = "hm_soap.jpg",
                            InStock = 91m,
                            Price = 19.99m,
                            Sku = "SS3343",
                            Title = "Hand made soap"
                        },
                        new
                        {
                            Id = 12,
                            Image = "cbd_balm.jpg",
                            InStock = 71m,
                            Price = 31.99m,
                            Sku = "CBD999",
                            Title = "CBD body balm"
                        });
                });

            modelBuilder.Entity("xyzWebApp.Models.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            ProductId = 9
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            ProductId = 11
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            ProductId = 6
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 4,
                            ProductId = 7
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 4,
                            ProductId = 12
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 6,
                            ProductId = 8
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 6,
                            ProductId = 10
                        });
                });

            modelBuilder.Entity("xyzWebApp.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "reflexo.jpg",
                            Price = 29.99m,
                            Sku = "SM2902",
                            Title = "Reflexo therapy"
                        },
                        new
                        {
                            Id = 2,
                            Image = "wome_mass.jpg",
                            Price = 39.99m,
                            Sku = "MC2222",
                            Title = "Women full body massage"
                        },
                        new
                        {
                            Id = 3,
                            Image = "dry_needle.jpg",
                            Price = 44.99m,
                            Sku = "MM0440",
                            Title = "Dry needle therapy"
                        });
                });

            modelBuilder.Entity("xyzWebApp.Models.ServiceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            ServiceId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("xyzWebApp.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("xyzWebApp.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xyzWebApp.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("xyzWebApp.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("xyzWebApp.Models.ProductCategory", b =>
                {
                    b.HasOne("xyzWebApp.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xyzWebApp.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("xyzWebApp.Models.ServiceCategory", b =>
                {
                    b.HasOne("xyzWebApp.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xyzWebApp.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Service");
                });
#pragma warning restore 612, 618
        }
    }
}
